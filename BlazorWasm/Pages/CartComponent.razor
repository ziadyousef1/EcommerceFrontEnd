@page "/my-cart"


<div class="container">
    <div class="row">
        
        @if (Products.Any())
        {
            <div class="col-lg-12">
                <div class="p-2 mt-3 w-100 bg-warning">
                    <div class="card m-2">
                        <div class="card-header">
                            <h1 class="text-center">My Cart</h1>
                        </div>
                        <div class="card-body">
                            <NetcodeHubDataGrid CssClass="table table-light">
                                <HeaderTemplate>
                                    <tr>
                                        <th>Image</th>
                                        <th style="width:150px">Name</th>
                                        <th>Price</th>
                                        <th>Quantity</th>
                                        <th>Total</th>
                                        <th class="text-center">Manage</th>
                                    </tr>
                                </HeaderTemplate>
                                <ContentTemplate>
                                    @foreach (var item in SelectedProducts)
                                    {
                                        Guid productId = item.Id;
                                        <tr>
                                            <td style="width:150px">@item.Image</td>
                                            <td style="width:250px">@item.Name</td>
                                            <td style="width:250px">$@item.Price</td>
                                            <td>
                                                <div class="hstack gap-1">
                                                    <input class="form-control w-25" type="number" value="@(GetProductQuantity(productId))"
                                                           min="1" @oninput="(e) => HandleInputChange(e, productId)" id="@productId"/>
                                                </div>
                                            </td>
                                            <td>@(GetProductTotalPrice(item.Id))</td>
                                            <td class="text-center">
                                                <i class="fa fa-trash text-danger buy_bt " @onclick="() => DeleteCartItem(item.Id)"> </i>
                                            </td>
                                        </tr>
                                    }
                                </ContentTemplate>
                            </NetcodeHubDataGrid>
                        </div>
                        <div class="card-footer">
                            <div class="fs-3 mb-3">Grand total: $@(GrandTotal(SelectedProducts))</div>
                            <button class="btn btn-danger btn-lg" @onclick="Checkout">Checkout</button>
                        </div>
                    </div>

                </div>

            </div>
        }
        else
        {
            <div class="col-lg-12">
                <div class="alert alert-warning mt-3" role="alert">
                    <h4 class="alert-heading">Cart is empty</h4>
                    
                </div>
            </div>
        }
    </div>
</div>
<style>
    
    
    .modalDialog {
        min-width: 300px;
        max-width: 500px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: fixed;
        top: 40%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
    }
</style>



<NetcodeHubToast
    @ref="ToastComponent"
    Position="@ToastPosition.Bottom()"
    IconClass="fa fa-check"
    Persist="true"
    Duration="4000"
    ></NetcodeHubToast>


@code {


    string Paying = null!;
    NetcodeHubToast? ToastComponent;
    bool ShowPaymentDialog = false;
    IEnumerable<GetPaymentMethod> PaymentMethods = new List<GetPaymentMethod>();
    List<GetProduct> SelectedProducts = new List<GetProduct>();
    IEnumerable<GetProduct> Products = new List<GetProduct>();
    List<ProcessCart> MyCarts = new List<ProcessCart>();
    
    protected override async Task OnInitializedAsync()
    {
        PaymentMethods = await PaymentMethodService.GetPaymentMethodsAsync();
        Products = await productService.GetAllAsync();
        string cartstring =await  browserCookieStorageService.GetAsync(ClientLibrary.Helper.Constants.Cart.Name);
        if(string.IsNullOrEmpty(cartstring))
          return;
        MyCarts = JsonSerializer.Deserialize<List<ProcessCart>>(cartstring);
        GetCart();


    }
    
    void GetCart()
    {
        SelectedProducts?.Clear();
        foreach (var item in MyCarts)
        {
            var product = Products.FirstOrDefault(x => x.Id == item.ProductId);
            if (product != null && !SelectedProducts!.Contains(product))
                SelectedProducts.Add(product);
        }
        SelectedProducts = SelectedProducts.OrderBy(x => x.Name).ToList();
    }

    int GetProductQuantity(Guid productId) => GetCartItem(productId).Quantity;

    ProcessCart GetCartItem(Guid productId) => MyCarts.FirstOrDefault(x => x.ProductId == productId)!;

    decimal GetProductTotalPrice(Guid productId)
    {
        int quantity = GetProductQuantity(productId);
        decimal price = Products.FirstOrDefault(x => x.Id == productId)!.Price;
        return quantity * price;
    }

    async Task HandleInputChange(ChangeEventArgs e, Guid productId)
    {
        int newQuantity = int.Parse(e.Value?.ToString()!);
        MyCarts.FirstOrDefault(x => x.ProductId == productId)!.Quantity = newQuantity;
        await SaveCart(MyCarts);
        GetCart();
        StateHasChanged();
    }

    async Task SaveCart(List<ProcessCart> carts)
    {
        string cartString = JsonSerializer.Serialize(carts);
        await browserCookieStorageService.SetAsync(ClientLibrary.Helper.Constants.Cart.Name, cartString,30,"/"); 
        
    }
    decimal GrandTotal(List<GetProduct> products)
    {
        decimal grandTotal = 0.00m;
        foreach (var product in products)
        {
            grandTotal += GetProductTotalPrice(product.Id);
        }
        return grandTotal;
    }

    async Task DeleteCartItem(Guid productId)
    {
        var cartItem = GetCartItem(productId);
        MyCarts.Remove(cartItem!);
        var product = SelectedProducts.FirstOrDefault(x => x.Id == productId);
        SelectedProducts.Remove(product!);
        await browserCookieStorageService.RemoveAsync(ClientLibrary.Helper.Constants.Cookie.Name);
        await SaveCart(MyCarts);
        await ToastComponent!.ShowDangerToast("Cart", "Product deleted");
    }
    [CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }
    async Task Checkout()
    {
        try
        {
            var user = (await UserAuthState!).User;
            if (!user.Identity!.IsAuthenticated)
                NavManager.NavigateTo($"authentication/login/{Constants.Cart.Name}");
            else
                ShowPaymentDialog = true;
        }
        catch
        {
            NavManager.NavigateTo($"authentication/login/{Constants.Cart.Name}");
        }
    }
    async Task SelectPaymentMethod(GetPaymentMethod paymentMethod)
    {
        if (paymentMethod == null) return;
        Paying = "Processing... please wait";
        var checkout = new CheckOut
        {
            PaymentMethodId = paymentMethod.Id,
            CartItems = MyCarts
        };
        var (success, paymentLink) = await cartService.CheckOutAsync(checkout);
        if (success)
        {
            Paying = null!;
            NavManager.NavigateTo(paymentLink);
        }
        else
        {
            await ToastComponent!.ShowDangerToast("Checkout", paymentLink);
            return;
        }
    }

    void Cancel() => ShowPaymentDialog = false;
}