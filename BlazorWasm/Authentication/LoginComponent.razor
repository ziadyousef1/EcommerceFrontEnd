@page "/Authentication/login"
@page "/Authentication/login/{Route}/"


<div class="container-fluid mt-5 p-5">
    <div class="row">
        <div class="col-lg-4 offset-4">
            <EditForm Model="Login" OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrEmpty(Message))
                {
                    <div class="alert alert-@AlertType">@Message</div>
                }
                <div class="card p-4">
                    <div class="card-body">
                        <div class="form-group">
                            <FloatingText @bind-Value="Login.Email" class="form-control" Label="Email Address" Placeholder="Example@gmail.com" />
                            <ValidationMessage For="() => Login.Email" />
                        </div>
                        <div class="form-group">
                            <FloatingText @bind-Value="Login.Password" class="form-control" Label="Password" Type="password" />
                            <ValidationMessage For="() => Login.Password" />
                        </div>
                        <button class="btn btn-primary" type="submit">Login</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    string AlertType =string.Empty;
    string Message = string.Empty;
    public LoginUser Login { get; set; } = new ();
    [Parameter] public string Route { get; set; } = null!;
    public async Task LoginUser()
    {
        AlertType = string.Empty;
        Message = string.Empty;
        var result = await authenticationService.Login(Login);
        if (!result.IsSuccess)
        {
            AlertType = "danger";
            Message = result.Message;
        }
        string cookieValue = tokenService.FormToken(result.Token, result.RefreshToken);
        await tokenService.SetCookie(
                    Constants.Cookie.Name,
                    cookieValue,
                    Constants.Cookie.Days,
                    Constants.Cookie.Path);
        (authStateProvider as CustomAuthProvider)!.NotifyAuthenticationState();
        NavManager.NavigateTo(Route == null ?"/" :Route,true);

    }

}
